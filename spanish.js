// Generated by CoffeeScript 1.4.0
(function() {
  var allPossibleFeatures, base, conditional, continuousEnglish, englishIndicative, englishs, future, gerund, imperative, imperfect, negativeImperative, participo, pastEnglish, pastParticipleBase, perfectEnglish, present, presentEnglish, preterite, regularVerbs, sentences, spanishIndicatives, translationFromEnglish, vtype;

  vtype = function(verb) {
    return verb.substr(-2, 2);
  };

  base = function(verb) {
    return verb.substr(0, verb.length - 2);
  };

  gerund = function(verb) {
    if (vtype(verb) === 'ar') {
      return base(verb) + 'ando';
    } else {
      return base(verb) + 'iendo';
    }
  };

  pastParticipleBase = function(verb) {
    if (vtype(verb) === 'ar') {
      return base(verb) + 'ad';
    } else {
      return base(verb) + 'id';
    }
  };

  participo = function(verb) {
    return pastParticipleBase(verb) + 'o';
  };

  spanishIndicatives = {
    0: ['yo'],
    1: ['tú'],
    2: ['él', 'ella', 'usted'],
    3: ['nosotros', 'nosotras'],
    4: ['vosotros', 'vosotras'],
    5: ['ellos', 'ellas', 'ustedes']
  };

  englishIndicative = {
    0: ['I'],
    1: ['you'],
    2: ['he', 'she', 'it', 'you (inf)'],
    3: ['we'],
    4: ['you all'],
    5: ['they', 'you all (inf)']
  };

  translationFromEnglish = {
    'I': 'yo',
    'you': 'tú',
    'he': 'él',
    'she': 'ella',
    'it': '',
    'you (inf)': 'usted',
    'we': 'nosotros',
    'you all': 'vosotros',
    'they': 'ellos',
    'you all (inf)': 'ustedes',
    'speak': 'hablar',
    'eat': 'comer',
    'live': 'vivir',
    'love': 'amar',
    'split': 'partir',
    'study': 'estudiar',
    'talk': 'hablar',
    'enter': 'entrar'
  };

  present = function(verb, tense) {
    if (verb === 'ir') {
      return ['voy', 'vas', 'va', 'vamos', 'vais', 'van'][tense];
    }
    if (verb === 'haber') {
      return ['he', 'has', 'ha', 'hemos', 'habéis', 'han'][tense];
    }
    return base(verb) + {
      'ar': ['o', 'as', 'a', 'amos', 'áis', 'an'],
      'er': ['o', 'es', 'e', 'emos', 'éis', 'en'],
      'ir': ['o', 'es', 'e', 'imos', 'ís', 'en']
    }[vtype(verb)][tense];
  };

  imperfect = function(verb, tense) {
    return base(verb) + {
      'ar': ['aba', 'abas', 'aba', 'ábamos', 'abais', 'aban'],
      'er': ['ía', 'ías', 'ía', 'íamos', 'íais', 'ían'],
      'ir': ['ía', 'ías', 'ía', 'íamos', 'íais', 'ían']
    }[vtype(verb)][tense];
  };

  preterite = function(verb, tense) {
    if (verb === 'ir' || verb === 'ser') {
      return ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'][tense];
    }
    return base(verb) + {
      'ar': ['é', 'aste', 'ó', 'amos', 'asteis', 'aron'],
      'er': ['í', 'iste', 'ió', 'imos', 'isteis', 'ieron'],
      'ir': ['í', 'iste', 'ió', 'imos', 'isteis', 'ieron']
    }[vtype(verb)][tense];
  };

  imperative = function(verb, tense) {
    return base(verb) + {
      'ar': ['', 'a', 'e', 'emos', 'ad', 'en'],
      'er': ['', 'e', 'a', 'amos', 'ed', 'an'],
      'ir': ['', 'e', 'a', 'amos', 'id', 'an']
    }[vtype(verb)][tense];
  };

  negativeImperative = function(verb, tense) {
    return base(verb) + {
      'ar': ['', 'es', 'e', 'emos', 'éis', 'en'],
      'er': ['', 'as', 'a', 'amos', 'áís', 'an'],
      'ir': ['', 'as', 'a', 'amos', 'áis', 'an']
    }[vtype(verb)][tense];
  };

  future = function(verb, tense) {
    var exceptions, verbMod;
    exceptions = {
      'querer': 'querr',
      'haber': 'habr',
      'saber': 'sabr',
      'poder': 'podr',
      'caber': 'cabr',
      'hacer': 'har',
      'decir': 'dir',
      'poner': 'pondr',
      'venir': 'vendr',
      'tener': 'tendr',
      'salir': 'saldr',
      'valer': 'valdr'
    };
    if (exceptions[verb]) {
      verbMod = exceptions[verb];
    } else {
      verbMod = verb;
    }
    return verbMod + ['é', 'ás', 'á', 'emos', 'éis', 'án'][tense];
  };

  conditional = function(verb, tense) {
    var exceptions, verbMod;
    exceptions = {
      'querer': 'querr',
      'haber': 'habr',
      'saber': 'sabr',
      'poder': 'podr',
      'caber': 'cabr',
      'hacer': 'har',
      'decir': 'dir',
      'poner': 'pondr',
      'venir': 'vendr',
      'tener': 'tendr',
      'salir': 'saldr',
      'valer': 'valdr'
    };
    if (exceptions[verb]) {
      verbMod = exceptions[verb];
    } else {
      verbMod = verb;
    }
    return verbMod + ['ía', 'ías', 'ía', 'íamos', 'íais', 'ían'][tense];
  };

  englishs = function(verb) {
    if (verb === 'have') {
      return 'has';
    } else {
      return verb + 's';
    }
  };

  pastEnglish = function(verb, person) {
    var exceptions;
    if (verb === 'be') {
      return ['was', 'were', 'was', 'were', 'were', 'were'][person];
    }
    exceptions = {
      'speak': 'spoke',
      'eat': 'ate',
      'split': 'split (past)',
      'love': 'loved',
      'live': 'lived'
    };
    if (exceptions[verb]) {
      return exceptions[verb];
    } else {
      return verb + 'ed';
    }
  };

  perfectEnglish = function(verb) {
    var exceptions;
    exceptions = {
      'speak': 'spoken',
      'eat': 'eaten',
      'split': 'split',
      'love': 'loved',
      'live': 'lived'
    };
    if (exceptions[verb]) {
      return exceptions[verb];
    } else {
      return verb + 'ed';
    }
  };

  presentEnglish = function(verb, person) {
    var a;
    if (verb === 'be') {
      a = ['am', 'are', 'is', 'are', 'are', 'are'];
      return a[person];
    } else if (parseInt(person) === 2) {
      return englishs(verb);
    } else {
      return verb;
    }
  };

  String.prototype.capitalize = function() {
    return this.substr(0, 1).toUpperCase() + this.substr(1);
  };

  continuousEnglish = function(verb) {
    var verbWithoutE;
    if (verb.substr(verb.length - 1) === 'e') {
      verbWithoutE = verb.substr(0, verb.length - 1);
    } else {
      verbWithoutE = verb;
    }
    return verbWithoutE + 'ing';
  };

  sentences = function(features) {
    var englishI, englishIList, reverseIfNecessary, spanishI, verbE, verbENoConj, verbS, verbSNoConj;
    englishIList = englishIndicative[features['person']];
    if (!englishIList) {
      throw "Can't find english indicative list from features: " + JSON.stringify(features);
    }
    englishI = englishIList[0];
    spanishI = translationFromEnglish[englishI];
    reverseIfNecessary = function(a) {
      if (features['reverse']) {
        return [a[1], a[0]];
      } else {
        return a;
      }
    };
    if (!features['verb']) {
      return reverseIfNecessary([englishI, spanishI]);
    } else {
      verbENoConj = features['verb'];
      verbSNoConj = translationFromEnglish[verbENoConj];
      if (verbSNoConj === void 0) {
        throw "No spanish verb for " + verbENoConj;
      }
      if (features['tense'] === 'imperative') {
        return reverseIfNecessary([verbENoConj.capitalize() + '!', imperative(verbSNoConj, features['person']).capitalize() + '!']);
      }
      if (features['tense'] === 'negative imperative') {
        return reverseIfNecessary(['Do not ' + verbENoConj + '!', 'No ' + negativeImperative(verbSNoConj, features['person']) + '!']);
      }
      if (features['tense'] === 'simple past') {
        verbE = pastEnglish(verbENoConj, features['person']);
        verbS = preterite(verbSNoConj, features['person']);
      } else if (features['tense'] === 'going to') {
        verbE = presentEnglish('be', features['person']) + ' going to ' + verbENoConj;
        verbS = present('ir', features['person']) + ' a ' + verbSNoConj;
      } else if (features['tense'] === 'present perfect') {
        verbE = presentEnglish('have', features['person']) + ' ' + perfectEnglish(verbENoConj);
        verbS = present('haber', features['person']) + ' ' + participo(verbSNoConj);
      } else if (features['tense'] === 'past continuous') {
        verbE = pastEnglish('be', features['person']) + ' ' + continuousEnglish(verbENoConj);
        verbS = imperfect(verbSNoConj, features['person']);
      } else if (features['tense'] === 'past perfect continuous') {
        verbE = presentEnglish('have', features['person']) + ' been ' + continuousEnglish(verbENoConj);
        verbS = imperfect('haber', features['person']) + ' ' + participo(verbSNoConj);
      } else if (features['tense'] === 'future simple') {
        verbE = 'will ' + verbENoConj;
        verbS = future(verbSNoConj, features['person']);
      } else if (features['tense'] === 'future perfect') {
        verbE = 'will have ' + perfectEnglish(verbENoConj);
        verbS = future('haber', features['person']) + ' ' + participo(verbSNoConj);
      } else if (features['tense'] === 'conditional') {
        verbE = 'would ' + verbENoConj;
        verbS = conditional(verbSNoConj, features['person']);
      } else {
        verbE = presentEnglish(verbENoConj, features['person']);
        verbS = present(verbSNoConj, features['person']);
      }
      if (features['hidei']) {
        return reverseIfNecessary([englishI.capitalize() + ' ' + verbE + '.', verbS.capitalize() + '.']);
      } else {
        return reverseIfNecessary([englishI.capitalize() + ' ' + verbE + '.', spanishI.capitalize() + ' ' + verbS + '.']);
      }
    }
  };

  regularVerbs = ['speak', 'eat', 'live', 'love', 'split'];

  allPossibleFeatures = function() {
    var hidei, person, possibleHidei, possiblePersons, possibleVerbs, r, reverse, tense, verb, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
    r = [];
    _ref = [null, 'present', 'simple past', 'going to', 'present perfect', 'past continuous', 'past perfect continuous', 'future simple', 'future perfect', 'conditional', 'imperative', 'negative imperative'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tense = _ref[_i];
      possibleVerbs = regularVerbs;
      if (tense === null) {
        possibleVerbs = [null];
      }
      for (_j = 0, _len1 = possibleVerbs.length; _j < _len1; _j++) {
        verb = possibleVerbs[_j];
        possiblePersons = [0, 1, 2, 3, 4, 5];
        if (tense === 'imperative' || tense === 'negative imperative') {
          possiblePersons = [1];
        }
        for (_k = 0, _len2 = possiblePersons.length; _k < _len2; _k++) {
          person = possiblePersons[_k];
          possibleHidei = [true, null];
          if (tense === 'imperative' || tense === 'negative imperative' || tense === null) {
            possibleHidei = [null];
          }
          if (tense === 'past continuous' && (person === 0 || person === 2)) {
            possibleHidei = [null];
          }
          for (_l = 0, _len3 = possibleHidei.length; _l < _len3; _l++) {
            hidei = possibleHidei[_l];
            _ref1 = [true, null];
            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
              reverse = _ref1[_m];
              r.push({
                tense: tense,
                verb: verb,
                person: person,
                hidei: hidei,
                reverse: reverse
              });
            }
          }
        }
      }
    }
    return r;
  };

  define("spanish", {
    sentences: sentences,
    allPossibleFeatures: allPossibleFeatures,
    regularVerbs: regularVerbs
  });

}).call(this);
