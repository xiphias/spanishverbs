// Generated by CoffeeScript 1.4.0
(function() {

  define("algorithm", ['linear_interpolator'], function(LinearInterpolator) {
    var Algorithm;
    return Algorithm = (function() {

      Algorithm.prototype.log = function(x) {
        if (this.logging) {
          return alert(x);
        }
      };

      Algorithm.prototype.compute_forget_timestamp_delta = function() {
        var counter_delta, forget_timestamp_delta, timestamp_delta;
        counter_delta = this.counter - this.last_tried_counter;
        timestamp_delta = this.timestamp - this.last_tried_at;
        if (counter_delta * 10 > timestamp_delta) {
          forget_timestamp_delta = counter_delta * 10;
        } else {
          forget_timestamp_delta = timestamp_delta;
        }
        return forget_timestamp_delta;
      };

      Algorithm.prototype.estimate_short_term = function(forget_timestamp_delta) {
        var last_short_term, short_term_virtual_counter_delta;
        if (this.failed_tries < 0.1) {
          last_short_term = 0.99;
        } else {
          last_short_term = 0.95;
        }
        short_term_virtual_counter_delta = forget_timestamp_delta / 10.0 + this.inverse_short_memory_table.at(last_short_term);
        this.estimated_short_term = this.short_memory_table.at(short_term_virtual_counter_delta);
        return this.estimated_short_term;
      };

      Algorithm.prototype.estimate_long_term = function(forget_timestamp_delta) {
        var long_term_virtual_counter_delta;
        long_term_virtual_counter_delta = forget_timestamp_delta / 10.0 / this.forgetting_time + this.inverse_long_memory_table.at(this.long_term_after_result);
        this.last_estimated_long_term = this.long_memory_table.at(long_term_virtual_counter_delta);
        this.log({
          last_estimated_long_term: this.last_estimated_long_term,
          inv: this.inverse_long_memory_table.at(this.long_term_after_result),
          long_term_virtual_counter_delta: long_term_virtual_counter_delta,
          long_term_after_result: this.long_term_after_result
        });
        return this.last_estimated_long_term;
      };

      Algorithm.prototype.normalize = function(x) {
        if (x < 0.0) {
          return 0;
        }
        if (x > 1.0) {
          return 1;
        }
        return x;
      };

      Algorithm.prototype.update_long_term = function() {
        if (this.estimated_short_term + this.last_estimated_long_term > 1) {
          this.estimated_short_term = 1 - this.last_estimated_long_term;
        }
        if (this.failed_tries < 0.1) {
          this.long_term_after_result = this.normalize(0.95 - this.estimated_short_term + this.last_estimated_long_term * 0.05);
        } else {
          this.long_term_after_result = this.normalize(this.last_estimated_long_term / 2.0);
        }
        return this.forgetting_time *= (1 - this.last_estimated_long_term) / (1 - this.long_term_after_result);
      };

      Algorithm.prototype.algorithm = function() {
        var forget_timestamp_delta;
        this.log(this.last_tried_counter);
        if (this.failed_tries === null) {
          this.log("first");
          this.estimated_short_term = 0.0;
          this.forgetting_time = 1.0;
          this.last_estimated_long_term = 0.0;
          return 0.2;
        }
        this.update_long_term();
        this.log("after_update_long_term: " + {
          forgetting_time: this.forgetting_time,
          long_term_after_result: this.long_term_after_result
        }.inspect);
        forget_timestamp_delta = this.compute_forget_timestamp_delta();
        this.estimated_short_term = this.estimate_short_term(forget_timestamp_delta);
        this.estimate_long_term(forget_timestamp_delta);
        this.last_estimated_knowledge = this.normalize(this.last_estimated_long_term + this.estimated_short_term);
        this.log({
          timestamp: this.timestamp,
          forget_timestamp_delta: forget_timestamp_delta,
          estimated_short_term: this.estimated_short_term,
          last_estimated_knowledge: this.last_estimated_knowledge
        });
        return this.last_estimated_knowledge;
      };

      function Algorithm(params) {
        if (params == null) {
          params = {};
        }
        this.counter = 0;
        this.timestamp = 0;
        this.confidence = 0;
        this.last_tried_counter = null;
        this.last_tried_at = null;
        this.failed_tries = null;
        this.last_estimated_knowledge = null;
        this.last_estimated_long_term = null;
        this.logging = params["logging"];
        this.short_memory_table = new LinearInterpolator({
          0: 1,
          1: 0.9,
          5: 0.7,
          7: 0.2,
          10: 0.01,
          100: 0.001,
          100000: 0
        });
        this.inverse_short_memory_table = new LinearInterpolator({
          1: 0,
          0.9: 1,
          0.7: 5,
          0.2: 7,
          0.01: 10,
          0.0001: 100,
          0: 100000
        });
        this.long_memory_table = new LinearInterpolator({
          0: 1,
          100000: 0.99,
          1100000: 0.98,
          1110000: 0.95,
          1111000: 0.1,
          10000000000: 0
        });
        this.inverse_long_memory_table = new LinearInterpolator({
          1: 0,
          0.99: 100000,
          0.98: 1100000,
          0.95: 1110000,
          0.1: 1111000,
          0: 10000000000
        });
      }

      Algorithm.prototype.predict_at = function(timestamp, counter) {
        this.timestamp = timestamp;
        this.counter = counter;
        return this.algorithm();
      };

      Algorithm.prototype.fail_after = function(timestamp_delta, counter_delta) {
        return this.fail_at(this.timestamp + timestamp_delta, this.counter + counter_delta);
      };

      Algorithm.prototype.fail_at = function(timestamp, counter, strength) {
        if (strength == null) {
          strength = 1;
        }
        this.counter = counter;
        this.timestamp = timestamp;
        this.last_estimated_knowledge = this.algorithm();
        this.failed_tries || (this.failed_tries = 0);
        this.failed_tries += strength;
        return this.after_algorithm();
      };

      Algorithm.prototype.success_after = function(timestamp_delta, counter_delta) {
        return this.success_at(this.timestamp + timestamp_delta, this.counter + counter_delta);
      };

      Algorithm.prototype.success_at = function(timestamp, counter, strength) {
        if (strength == null) {
          strength = 1;
        }
        this.counter = counter;
        this.timestamp = timestamp;
        this.last_estimated_knowledge = this.algorithm();
        this.failed_tries *= 1 - strength;
        return this.after_algorithm();
      };

      Algorithm.prototype.update = function(score, timestamp, counter, strength) {
        if (strength == null) {
          strength = 1;
        }
        this.counter = counter;
        this.timestamp = timestamp;
        this.last_estimated_knowledge = this.algorithm();
        this.failed_tries || (this.failed_tries = 0);
        this.failed_tries += (1 - score) * strength - score * this.failed_tries * strength;
        this.confidence += strength;
        return this.after_algorithm();
      };

      Algorithm.prototype.after_algorithm = function() {
        this.last_tried_at = this.timestamp;
        return this.last_tried_counter = this.counter;
      };

      Algorithm.prototype.sql_algorithm = function(counter, timestamp) {
        var counter_delta, forget_multiplier, forget_timestamp, timestamp_delta;
        counter_delta = "(" + counter + "-last_tried_counter)";
        timestamp_delta = "(" + timestamp + "-last_tried_at)";
        forget_timestamp = "(" + counter_delta + "*60 > " + timestamp_delta + ") ? (" + counter_delta + " * 60) : " + timestamp_delta;
        forget_multiplier = "1 / log(" + timestamp_delta + "/60/60/24)";
        return "(failed_tries is NULL) ? 0.2 : ((falied_tries > 0) ? last_estimated_knowledge : sqrt(last_estimated_knowledge)) * " + forget_multipier + ")";
      };

      return Algorithm;

    })();
  });

}).call(this);
